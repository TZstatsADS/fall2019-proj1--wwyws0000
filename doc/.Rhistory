getwd()
sys.getenv()
Sys.getenv()
Sys.getenv('PATH')
install.packages('dplyr')
install.packages('xts')
?install.packages
.libPaths()
file.path('~')
?filepath
?file.path
.libPaths()
Sys.getenv('R_ENVIRON')
Sys.getenv('R_E')
Sys.getenv('R_HOME')
Sys.getenv('R_ENVIRON_USER')
?Sys.getenv
Sys.getenv()
?.libPaths
.libPaths
.libPaths()
?Sys.getenv
.libPaths()
.libPaths()
?.libPaths()
.Library
.Library.site
.libPaths()
Sys.getenv()
Sys.getenv()
.libPaths()
.libPaths()
Sys.getenv()
.libPaths()
.libPaths()
Sys.getenv()
.libPaths()
getwd()
Sys.getenv()
.libPaths()
.libPaths(.libPaths()[2])
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
.libPaths()
install.packages('dplyr')
R.home()
install.packages('dplyr')
install.packages('xts')
library(tidytext)
library(tidyverse)
install.packages('tidytext')
library(tidyverse)
install.packages('tidytext')
library(tidyverse)
library(tidytext)
install.packages('tidyverse')
install.packages('plotly')
library(DT)
install.packages('DT')
install.packages('tm')
install.packages('data.table')
install.packages('scales')
install.packages('wordcloud2')
install.packages('gridExtra')
install.packages('ngram')
install.packages('shiny')
unlink('Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc/Text_Processing_cache', recursive = TRUE)
setwd('D:/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(RColorBrewer)
setwd('C:/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
setwd('C:/Users/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
lyrics_list <- c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Other")
time_list <- c("1970s", "1980s", "1990s", "2000s", "2010s")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
word_tibble <- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
years <- seq(1970,2010,by = 10)
dt_lyrics <- dt_lyrics[dt_lyrics$year>=1970,]
dt_lyrics <- cbind(dt_lyrics,decade = years[findInterval(dt_lyrics$year,years)])
load('../output/processed_lyrics.RData')
getwd()
load('../output/processed_lyrics.RData')
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(RColorBrewer)
# setwd('C:/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
setwd('C:/Users/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
lyrics_list <- c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Other")
time_list <- c("1970s", "1980s", "1990s", "2000s", "2010s")
corpus <- VCorpus(VectorSource(dt_lyrics$stemmedwords))
word_tibble <- tidy(corpus) %>%
select(text) %>%
mutate(id = row_number()) %>%
unnest_tokens(word, text)
years <- seq(1970,2010,by = 10)
dt_lyrics <- dt_lyrics[dt_lyrics$year>=1970,]
dt_lyrics <- cbind(dt_lyrics,decade = years[findInterval(dt_lyrics$year,years)])
##bigrams
lyric_bigrams <- dt_lyrics %>%
unnest_tokens(bigram, stemmedwords, token = "ngrams", n = 2)
bigram_counts <- lyric_bigrams %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
count(word1, word2,decade, sort = TRUE)
plotList <- list()
for (i in 1:length(years)){
bigram_counts_sub <- bigram_counts[bigram_counts$decade==years[i],]
combined_words <- apply(bigram_counts_sub[c(1, 2)], 1, paste , collapse = " " )[1:10]
x_names <- factor(combined_words, levels = rev(combined_words))
plotList[[i]] <- plot_ly(
x = bigram_counts_sub$n[1:10],
y = x_names,
name =years[i],
type = "bar",
orientation = 'h'
)
}
subplot(plotList,nrows = 2)
?div
?beeswarm
genreCount <- dt_lyrics %>% count(genre,decade, sort = TRUE)
genreCountList <- split(genreCount,genreCount$decade)
plot_ly() %>%
add_pie(data = genreCountList[[1]], labels = ~genre, values = ~n,
name = names(genreCountList)[1], domain = list(row = 0, column = 0)) %>%
add_pie(data = genreCountList[[2]], labels = ~genre, values = ~n,
name = names(genreCountList)[2], domain = list(row = 0, column = 1)) %>%
add_pie(data = genreCountList[[3]], labels = ~genre, values = ~n,
name = names(genreCountList)[3], domain = list(row = 1, column = 0)) %>%
add_pie(data = genreCountList[[4]], labels = ~genre, values = ~n,
name = names(genreCountList)[4], domain = list(row = 1, column = 1)) %>%
add_pie(data = genreCountList[[5]], labels = ~genre, values = ~n,
name = names(genreCountList)[5], domain = list(row = 1, column = 2)) %>%
layout(grid=list(rows=2, columns=3),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
?unnest_tokens
View(word_tibble)
View(dt_lyrics)
a <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'sentences')
View(a)
View(dt_lyrics)
b <- a[a$id == 1,]
View(b)
a <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'regex',pattern = '[[::punct::]]')
View(a)
b <- a[a$id == 1,]
View(b)
a <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'regex',pattern = '[:punct:]')
b <- a[a$id == 1,]
View(b)
b <- a[a$id == 12,]
View(b)
View(a)
lyric_segment <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'regex',pattern = '[:punct:]')
?mutate
lyric_segment <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'regex',pattern = '[:punct:]') %>% mutate(segLength = nchar(sentence))
View(lyric_segment)
colnames(lyric_segment)
a <- lyric_segment %>% select(id,decade,segLength)
a <- lyric_segment %>% select(id,decade,segLength) %>% group_by(id) %>% summarize(aveLength = mean(segLength))
View(a)
b <- lyric_segment[lyric_segment$id == 1,]
View(b)
mean(b$segLength)
b <- lyric_segment[lyric_segment$id == 4,]
mean(b$segLength)
a <- lyric_segment %>% select(id,decade,segLength) %>% group_by(id,decade) %>% summarize(aveLength = mean(segLength))
View(a)
lyrics_segment_len <- lyric_segment %>% select(id,decade,segLength) %>% group_by(id,decade) %>% summarize(aveLength = mean(segLength))
mycolors <- brew.pal(5,'Accent')
mycolors <- brewer.pal(5,'Accent')
decades
years
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1],
marker = list(color = mycolors[1],alpha=0.5),
line = list(color = mycolors[1],alpha=0.5),
name=years[1])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1],
marker = list(color = mycolors[1],alpha=0.5),
line = list(color = mycolors[1],alpha=0.5),
name=years[1])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
marker = list(color = mycolors[1],alpha=0.5),
line = list(color = mycolors[1],alpha=0.5),
name=years[1])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
marker = list(color = mycolors[1]),
line = list(color = mycolors[1]),
name=years[1])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
marker = list(color = mycolors[1]),
line = list(color = mycolors[1]),
name=years[1]) %>%
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[2]],
marker = list(color = mycolors[2]),
line = list(color = mycolors[2]),
name=years[2])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
marker = list(color = mycolors[1]),
line = list(color = mycolors[1]),
name=years[1]) %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[2]],
marker = list(color = mycolors[2]),
line = list(color = mycolors[2]),
name=years[2])
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
marker = list(color = mycolors[1]),
line = list(color = mycolors[1]),
name=years[1]) %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[2]],
marker = list(color = mycolors[2]),
name=years[2])
div(plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
name=years[1]) %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[2]],
name=years[2]),
align='center')
plot_ly(type = "box") %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]],
name=years[1]) %>%
add_boxplot(y=lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[2]],
name=years[2])
x <- lyrics_segment_len$aveLength[lyrics_segment_len$decade==years[1]]
quantile(x)
?quantile
quantile(x,probs = c(0.025,0.0975))
quantile(x,probs = c(0.025,975))
quantile(x,probs = c(0.025,0.975))
quantile(x,probs = c(0.025,0.995))
quantile(x,probs = c(0.005,0.995))
qs <- quantile(x,probs = c(0.005,0.995))
x[x>=qs[1] & x <= qs[2]]
cutoffOutlier <- function(x){
qs <- quantile(x,probs = c(0.005,0.995))
x[x>=qs[1] & x <= qs[2]]
}
View(lyrics_segment_len)
a <- split(lyrics_segment_len, by = lyrics_segment_len$decade)
?split
a <- split(lyrics_segment_len, f = lyrics_segment_len$decade)
a$`1970`
lapply(split(lyrics_segment_len, f = lyrics_segment_len$decade), FUN = cutoffOutlier)
split(lyrics_segment_len, f = lyrics_segment_len$decade)
lapply(split(lyrics_segment_len, f = lyrics_segment_len$decade), FUN = function(x){
qs <- quantile(x$aveLength,probs = c(0.005,0.995))
x[x$aveLength >= qs[1] & x$aveLength <= qs[2],]
})
a <- do.call(rbind, lapply(split(lyrics_segment_len, f = lyrics_segment_len$decade), FUN = function(x){
qs <- quantile(x$aveLength,probs = c(0.005,0.995))
x[x$aveLength >= qs[1] & x$aveLength <= qs[2],]
}))
View(a)
lyrics_segment_len <- do.call(rbind, lapply(split(lyrics_segment_len, f = lyrics_segment_len$decade), FUN = function(x){
qs <- quantile(x$aveLength,probs = c(0.005,0.995))
x[x$aveLength >= qs[1] & x$aveLength <= qs[2],]
}))
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade)
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box')
View(lyrics_segment_len)
a <- ggplot2::diamonds
View(a)
colnames(lyrics_segment_len)
class(a)
class(lyrics_segment_len)
plotly(ggplot2::diamonds, y = ~price,color = ~cut, type = 'box')
plot_ly(ggplot2::diamonds, y = ~price,color = ~cut, type = 'box')
lyrics_segment_len
table(lyrics_segment_len$aveLength)
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box')
lyrics_segment_len$decade <- as.character(
lyrics_segment_len$decade)
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box')
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box') %>% layout(yaxis = list(title = 'asd'))
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box') %>% layout(yaxis = list(title = 'Average Length of Lyric Segments'))
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box',colors = mycolors) %>% layout(yaxis = list(title = 'Average Length of Lyric Segments'))
mycolors <- brewer.pal(10,'Accent')
View(dt_lyrics)
library(tidyverse)
library(tidytext)
library(plotly)
library(DT)
library(tm)
library(data.table)
library(scales)
library(wordcloud2)
library(gridExtra)
library(ngram)
library(shiny)
library(RColorBrewer)
# setwd('C:/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
setwd('C:/Users/wwyws/Documents/Columbia/STAT5243 Applied Data Science/fall2019-proj1--wwyws0000/doc')
# load lyrics data
load('../output/processed_lyrics.RData')
# load artist information
dt_artist <- fread('../data/artists.csv')
lyrics_list <- c("Folk", "R&B", "Electronic", "Jazz", "Indie", "Country", "Rock", "Metal", "Pop", "Hip-Hop", "Other")
time_list <- c("1970s", "1980s", "1990s", "2000s", "2010s")
years <- seq(1970,2010,by = 10)
dt_lyrics <- dt_lyrics[dt_lyrics$year>=1970,]
dt_lyrics <- cbind(dt_lyrics,decade = years[findInterval(dt_lyrics$year,years)],songLen = nchar(dt_lyrics$lyrics))
View(dt_lyrics)
song_len <- dt_lyrics %>% select(id,decade,sonLen) %>% group_by(id,decade) %>% summarize(aveLength = mean(sonLen))
View(dt_lyrics)
song_len <- dt_lyrics %>% select(id,decade,songLen) %>% group_by(id,decade) %>% summarize(aveLength = mean(songLen))
View(song_len)
song_len <- dt_lyrics %>% select(id,decade,songLen)
View(song_len)
View(song_len)
song_len <- do.call(rbind, lapply(split(song_len, f = song_len$decade), FUN = function(x){
qs <- quantile(x$songLength,probs = c(0.005,0.995))
x[x$songLength >= qs[1] & x$songLength <= qs[2],]
}))
song_len <- dt_lyrics %>% select(id,decade,songLen)
mycolors <- brewer.pal(5,'Set1')
split(song_len, f = song_len$decade)
a <- split(song_len, f = song_len$decade)
song_len <- do.call(rbind, lapply(split(song_len, f = song_len$decade), FUN = function(x){
qs <- quantile(x$songLen,probs = c(0.005,0.995))
x[x$songLen >= qs[1] & x$songLen <= qs[2],]
}))
song_len$decade <- as.character(song_len$decade)
View(song_len)
plot_ly(song_len,y = ~sonLen,color = ~decade,type = 'box') %>% layout(yaxis = list(title = 'Average Length of Song'))
plot_ly(song_len,y = ~songLen,color = ~decade,type = 'box') %>% layout(yaxis = list(title = 'Average Length of Song'))
install.packages(c("d3heatmap", "ggpubr", "qdap", "rJava", "sentimentr", "syuzhet"))
library(sentimentr)
?sent.detect
?sent_detect
library(qdap)
library(syuzhet)
send_detect(dt_lyrics$lyrics[1])
sent_detect(dt_lyrics$lyrics[1])
?sentsplit
library(qdap)
?get_nrc_sentiment
get_nrc_sentiment(dt_lyrics$lyrics[1:10])
str_count
str_count(dt_lyrics$lyrics[1])
str_count(dt_lyrics$lyrics[1],pattern = " ")
View(dt_lyrics)
##length of songs lyric segments
lyric_segment <- dt_lyrics %>% unnest_tokens(sentence,lyrics,token = 'regex',pattern = '[:punct:]') %>% mutate(segLength = nchar(sentence))
lyrics_segment_len <- lyric_segment %>% select(id,decade,segLength) %>% group_by(id,decade) %>% summarize(aveLength = mean(segLength))
mycolors <- brewer.pal(5,'Accent')
lyrics_segment_len <- do.call(rbind, lapply(split(lyrics_segment_len, f = lyrics_segment_len$decade), FUN = function(x){
qs <- quantile(x$aveLength,probs = c(0.005,0.995))
x[x$aveLength >= qs[1] & x$aveLength <= qs[2],]
}))
lyrics_segment_len$decade <- as.character(lyrics_segment_len$decade)
plot_ly(lyrics_segment_len,y = ~aveLength,color = ~decade,type = 'box',colors = mycolors) %>% layout(yaxis = list(title = 'Average Length of Lyric Segments'))
?wordcount
a <- wordcount(dt_lyrics$lyrics)
dt_lyrics$lyrics
a <- str_count(dt_lyrics$lyrics,pattern = '\\w+')
View(dt_lyrics)
